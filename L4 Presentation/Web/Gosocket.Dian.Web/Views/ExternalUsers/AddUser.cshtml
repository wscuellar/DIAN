@model Gosocket.Dian.Web.Models.ExternalUserViewModel

@{
    ViewBag.Title = "Agregar usuarios Externos";
}

<div class="page-content margin-15">
    <div class="row margin-horizontal-0">
        <div class="panel">
            <div class="panel-heading">
                <h3 class="panel-title">@ViewBag.Title</h3>
            </div>

            <div class="panel-body padding-top-20">
                <div class="row margin-horizontal-0">
                    <div id="panel-form" data-target="#panel-form" data-toggle="panel-overlay" class="panel panel-bordered-dian margin-bottom-0">
                        @using (Html.BeginForm("AddUser", "ExternalUsers", FormMethod.Post, new { id = "add-user-form" }))
                        {
                            @Html.HiddenFor(m => m.Id)
                            <input type="hidden" id="listMenu" value="@Newtonsoft.Json.JsonConvert.SerializeObject(ViewBag.Menu)" />
                            <input type="hidden" id="hddPermissions" name="hddPermissions" />
                            <input type="hidden" id="hddPermissionsAsigned" name="hddPermissionsAsigned"
                                   value="@(ViewBag.PermissionList != null ? Newtonsoft.Json.JsonConvert.SerializeObject(ViewBag.PermissionList) : null)" />

                            @Html.Partial("_userForm")
                            @Html.ValidationSummary("", new { @class = "text-center text-danger" })
                            <div class="padding-20">
                                @foreach (Gosocket.Dian.Web.Models.MenuViewModel menu in ((List<Gosocket.Dian.Web.Models.MenuViewModel>)ViewBag.Menu))
                                {
                                    <div class="btn-group" id="controlMenu">
                                        <button type="button" class="btn btn-primary dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                            @menu.Name &nbsp;<span class="badge badge-light" style="color: #074fbb;">@(menu.Options != null ? (((Gosocket.Dian.Web.Models.MenuViewModel)menu).Options).Count() : 0)</span>
                                            &nbsp;<span class="caret"></span>
                                        </button>
                                        <div class="dropdown-menu" style="padding-left: 8px; padding-right: 8px;">
                                            <div class="custom-control custom-checkbox dropdown-item">
                                                <input type="checkbox" class="custom-control-input" id="@("menu" + menu.Id)" onchange="changeAllMenu(@menu.Id)">
                                                <label class="custom-control-label" for="@("lblMenu" + menu.Id)">Todos...</label>
                                            </div>
                                            @if (menu.Options != null)
                                            {
                                                foreach (Gosocket.Dian.Web.Models.SubMenuViewModel subMenu in ((Gosocket.Dian.Web.Models.MenuViewModel)menu).Options)
                                                {
                                                    <div class="custom-control custom-checkbox dropdown-item">
                                                        <input type="checkbox" class="custom-control-input" id="@("submenu" + menu.Id + "_" + subMenu.Id)">
                                                        <label class="custom-control-label" for="@("lblSubmenu" + menu.Id + "_" + subMenu.Id)">@subMenu.Name</label>
                                                    </div>
                                                }
                                            }
                                        </div>
                                    </div>
                                }
                            </div>
                            <br />
                            <div class="form-group text-center">
                                @Html.ActionLink("Nuevo", "AddUser", "ExternalUsers", null, new { @class = "btn btn-default" })
                                <button type="button" class="btn btn-danger btn-hover-gosocket btn-active" data-toggle="modal" data-target="#dialogConfirmActive" onclick="confirmActive()">@ViewBag.txtActive</button>
                                <button type="submit" class="btn btn-success btn-hover-gosocket btn-save">@ViewBag.txtAccion</button>
                            </div>
                            <br />
                            <table class="table table-sm table-bordered">
                                <thead>
                                    <tr>
                                        <th>Tipo de documento</th>
                                        <th>Documento</th>
                                        <th>Nombres</th>
                                        <th>Email</th>
                                        <th class="text-center">Activo?</th>
                                        <th class="text-center">Editar</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @if (ViewBag.ExternalUsersList != null)
                                    {
                                        List<Gosocket.Dian.Web.Models.IdentificationTypeListViewModel> listDocsTypesLis = (List<Gosocket.Dian.Web.Models.IdentificationTypeListViewModel>)ViewBag.IdentificationTypesList;
                                        foreach (var item in (List<Gosocket.Dian.Web.Models.ExternalUserViewModel>)ViewBag.ExternalUsersList)
                                        {
                                            <tr>
                                                <td>@listDocsTypesLis.FirstOrDefault(i => i.Id == item.IdentificationTypeId).Description</td>
                                                <td>@item.IdentificationId</td>
                                                <td>@item.Names</td>
                                                <td>@item.Email</td>
                                                <td class="text-center">@(item.Active == 1 ? "Sí" : "No")</td>
                                                <td class="text-center">
                                                    @Html.ActionLink("Editar", "AddUser", new { id = item.Id }, new { @class = "btn btn-primary" })
                                                </td>
                                            </tr>
                                        }
                                    }
                                </tbody>
                            </table>
                            <br />
                            @*<div class="panel-footer text-center">
                                    @Html.ActionLink("Nuevo", "AddUser", null, new { @class = "btn btn-secondary btn-hover-gosocket" })
                                    <button type="button" class="btn btn-danger btn-hover-gosocket btn-active" data-toggle="modal" data-target="#dialogConfirmActive" onclick="confirmActive()">@ViewBag.txtActive</button>
                                    <button type="submit" class="btn btn-success btn-hover-gosocket btn-save">@ViewBag.txtAccion</button>
                                </div>*@
                        }
                    </div>
                </div>

            </div>

        </div>
    </div>
</div>

<div class="modal fade" id="dialogConfirmActive" tabindex='-1' data-keyboard="false">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">Confirmar Acción</h4>
            </div>
            <div class="modal-body">

                <h3>Esta seguro de <span style="font-weight:bold">@ViewBag.txtActive</span> el Usuario?</h3>
                <br />
                <div class="form-group">
                    <label for="txtActiveDescription" class="control-label">Escriba la razon por la cual realiza esta acción:</label>
                    <textarea type="text" id="txtActiveDescription" cols="3" rows="3" maxlength="150" class="form-control"></textarea>
                </div>

            </div>
            <div class="modal-footer">
                <button id="btnOkActive" type="button" data-dismiss="modal" class="btn btn-success">Aceptar</button>
                <button id="btnCancelActive" type="button" data-dismiss="modal" class="btn btn-danger">Cancelar</button>
            </div>
        </div>
    </div>
</div>

@section scripts
{
    @Scripts.Render("~/bundles/jqueryval")

    <script>
        var listMenu;
        var userId = "";
        var reloadView = false;
        var listPermisionsAsigned;
        $(document).ready(function ($) {

            userId = $("#Id").val();
            reloadView = false;

            if(userId.length > 0)
                $(".btn-active").show();
            else
                $(".btn-active").hide();

            listMenu = JSON.parse($("#listMenu").val());

            $('.btn-save').click(function () {
                var form = $('#add-user-form');
                if (form.valid()) {
                    showLoading('#panel-form', 'Guardando', 'Procesando datos, por favor espere.');

                    var permissions = getPermissions();

                    $('#hddPermissions').val(permissions);

                    //form.submit();
                }
            });

            //$('#dialogConfirmActive').on('hidden.bs.modal', function () {
            //    if (reloadView)
            //        reloadPage();

            //});

            function confirmActive() {
                $("#dialogConfirmActive").alert('show');
            }

            $("#btnOkActive").click(function () {

                $.ajax({
                    url: "@Url.Action("UpdateActive","ExternalUsers")",
                    type: "POST",
                    data: {
                        userId: $("#Id").val(), active: $(".btn-active").text(), activeDescription: $("#txtActiveDescription").val(), email: $("#Email").val() },
                    datatype: "json",
                    success: function (res) {

                        if (res.StatusCode == 'OK') {
                            reloadView = true;

                            if ($(".btn-active").text() == 'Activar')
                                $(".btn-active").text('Desactivar');
                            else
                                $(".btn-active").text('Activar');

                            $.niftyNoty({
                                type: res.StatusCode == 'OK' ? "success" : "danger",
                                container: "floating",
                                title: "Mensaje...",
                                message: res.Message,
                                closeBtn: false,
                                timer: 5000
                            });

                            reloadPage();
                        }
                        else
                            reload = false;

                    },
                    complete: function () {

                    },
                    error: function (result) {

                        $.niftyNoty({
                            type: "danger",
                            container: "floating",
                            title: "Mensaje",
                            message: "Error desconocido al actulizar el estado del Usuario",
                            closeBtn: false,
                            timer: 5000
                        });
                    }
                });  //ajax

            });

            $("#btnCancelActive").click(function () {
                $('#dialogConfirmActive').alert('close');
            });

            if ($("#hddPermissionsAsigned").val() != null && $("#hddPermissionsAsigned").val() != "") {

                listPermisionsAsigned = JSON.parse($("#hddPermissionsAsigned").val());

                for (i = 0; i < listMenu.length; i++) {
                    console.log('Menu: ' + listMenu[i].Id + listMenu[i].Name);
                    if (listMenu[i].Options != null && listMenu[i].Options.length > 0) {
                        for (j = 0; j < listMenu[i].Options.length; j++) {

                            var asigned = validSubMenuAsigned(listMenu[i].Options[j].Id);

                            if (asigned) {
                                $("#submenu" + listMenu[i].Id + "_" + listMenu[i].Options[j].Id).prop("checked", "checked");
                            }
                        }
                    }
                    else {
                        if (validMenuWithoutSubMenu(listMenu[i].Id)) {
                            $("#menu" + listMenu[i].Id).prop("checked", "checked")
                        }
                    }
                }
            }

        });

        function validMenuWithoutSubMenu(menuId) {
            var menuSelected = false;

            for (z = 0; z < listPermisionsAsigned.length; z++) {
                if (menuId == listPermisionsAsigned[z].MenuId && (listPermisionsAsigned[z].SubMenuId == 0)) {
                    menuSelected = true;
                    break;
                }
            }

            console.log('menuId: ' + menuId + ', sin SubMenuId: ' + menuSelected);

            return menuSelected;
        }

        function validSubMenuAsigned(subMenuId) {
            var asigned = false;

            for (z = 0; z < listPermisionsAsigned.length; z++) {
                if (subMenuId == listPermisionsAsigned[z].SubMenuId) {
                    asigned = true;
                    break;
                }
            }

            return asigned;
        }

        function changeAllMenu(menuId) {

            var checked = $("#menu" + menuId).prop("checked");

            for (i = 0; i < listMenu.length; i++) {

                if (listMenu[i].Id == menuId && listMenu[i].Options != null) {
                    for (j = 0; j < listMenu[i].Options.length; j++) {
                        $("#submenu" + menuId + "_" + listMenu[i].Options[j].Id).prop("checked", checked);
                    }
                }
            }

        }

        function getPermissions() {

            var arrPermissions = [];

            $.each(listMenu, function (index, value) {
                if (value.Options != null && value.Options.length > 0) {
                    for (j = 0; j < listMenu[index].Options.length; j++) {

                        if ($("#submenu" + listMenu[index].Id + "_" + listMenu[index].Options[j].Id).prop("checked")) {

                            arrPermissions.push({
                                MenuId: listMenu[index].Id,
                                SubMenuId: listMenu[index].Options[j].Id
                            });

                        }
                    }
                }
                else {

                    console.log("menuId: " + listMenu[index].Id + ', checked: ' +  $("#menu" + listMenu[index].Id).prop("checked"));

                    //Valido si la opcion de Menu que NO tiene SubMenu tiene la opción Todos seleccionada
                    if($("#menu" + listMenu[index].Id).prop("checked")){
                        arrPermissions.push({
                            MenuId: listMenu[index].Id,
                            SubMenuId: 0
                        });
                    }
                }

            });

            console.log('arrPermissions', arrPermissions);
            return JSON.stringify(arrPermissions);
        }

        function reloadPage() {
            location.href = "@Url.Action("AddUser","ExternalUsers")";
        }

    </script>
}
